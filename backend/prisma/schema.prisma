generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================
// USER MANAGEMENT
// ============================================

model User {
  id            String    @id @default(uuid())
  email         String    @unique
  passwordHash  String    @map("password_hash")
  username      String    @unique
  fullName      String?   @map("full_name")
  phone         String?
  avatarUrl     String?   @map("avatar_url")
  emailVerified Boolean   @default(false) @map("email_verified")
  discordId     String?   @unique @map("discord_id")
  role          UserRole  @default(CUSTOMER)
  tribePoints   Int       @default(0) @map("tribe_points")
  isActive      Boolean   @default(true) @map("is_active")
  lastLoginAt   DateTime? @map("last_login_at")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  // Relations
  orders            Order[]
  addresses         Address[]
  cartItems         CartItem[]
  reviews           Review[]
  wishlistItems     WishlistItem[]
  tribeMembership   TribeMembership?
  nfcScans          NfcScan[]
  refreshTokens     RefreshToken[]

  @@map("users")
}

enum UserRole {
  CUSTOMER
  ADMIN
  MODERATOR
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String   @map("user_id")
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}

// ============================================
// PRODUCT MANAGEMENT
// ============================================

model Product {
  id                 String    @id @default(uuid())
  slug               String    @unique
  name               String
  description        String?   @db.Text
  price              Decimal   @db.Decimal(10, 2)
  compareAtPrice     Decimal?  @map("compare_at_price") @db.Decimal(10, 2)
  category           String
  subCategory        String?   @map("sub_category")
  badge              String?
  rating             Decimal   @default(0) @db.Decimal(2, 1)
  reviewCount        Int       @default(0) @map("review_count")
  inStock            Boolean   @default(true) @map("in_stock")
  stockQuantity      Int       @default(0) @map("stock_quantity")
  lowStockThreshold  Int       @default(10) @map("low_stock_threshold")
  batchNumber        String?   @map("batch_number")
  isVaulted          Boolean   @default(false) @map("is_vaulted")
  nfcEnabled         Boolean   @default(true) @map("nfc_enabled")
  blockchainContract String?   @map("blockchain_contract")
  sku                String?   @unique
  weight             Decimal?  @db.Decimal(8, 2)
  dimensions         Json?
  isFeatured         Boolean   @default(false) @map("is_featured")
  isActive           Boolean   @default(true) @map("is_active")
  createdAt          DateTime  @default(now()) @map("created_at")
  updatedAt          DateTime  @updatedAt @map("updated_at")
  vaultedAt          DateTime? @map("vaulted_at")

  // Relations
  images        ProductImage[]
  variants      ProductVariant[]
  orderItems    OrderItem[]
  cartItems     CartItem[]
  reviews       Review[]
  wishlistItems WishlistItem[]
  nfcTags       NfcTag[]

  @@index([category])
  @@index([slug])
  @@index([isActive])
  @@map("products")
}

model ProductImage {
  id        String   @id @default(uuid())
  productId String   @map("product_id")
  url       String
  altText   String?  @map("alt_text")
  position  Int      @default(0)
  isPrimary Boolean  @default(false) @map("is_primary")
  createdAt DateTime @default(now()) @map("created_at")

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_images")
}

model ProductVariant {
  id          String  @id @default(uuid())
  productId   String  @map("product_id")
  name        String
  type        String // e.g., "size", "color"
  value       String
  priceAdjust Decimal @default(0) @map("price_adjust") @db.Decimal(10, 2)
  stockAdjust Int     @default(0) @map("stock_adjust")
  sku         String?
  isActive    Boolean @default(true) @map("is_active")

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([productId, type, value])
  @@map("product_variants")
}

// ============================================
// CART & WISHLIST
// ============================================

model CartItem {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  productId String   @map("product_id")
  quantity  Int      @default(1)
  variantId String?  @map("variant_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId, variantId])
  @@map("cart_items")
}

model WishlistItem {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  productId String   @map("product_id")
  createdAt DateTime @default(now()) @map("created_at")

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("wishlist_items")
}

// ============================================
// ORDERS & PAYMENTS
// ============================================

model Order {
  id              String      @id @default(uuid())
  orderNumber     String      @unique @map("order_number")
  userId          String      @map("user_id")
  status          OrderStatus @default(PENDING)
  totalAmount     Decimal     @map("total_amount") @db.Decimal(10, 2)
  subtotal        Decimal     @db.Decimal(10, 2)
  tax             Decimal     @default(0) @db.Decimal(10, 2)
  shippingCost    Decimal     @default(0) @map("shipping_cost") @db.Decimal(10, 2)
  discountAmount  Decimal     @default(0) @map("discount_amount") @db.Decimal(10, 2)
  couponCode      String?     @map("coupon_code")
  shippingAddress Json        @map("shipping_address")
  billingAddress  Json?       @map("billing_address")
  paymentMethod   String      @map("payment_method")
  paymentStatus   PaymentStatus @default(PENDING) @map("payment_status")
  paidAt          DateTime?   @map("paid_at")
  shippedAt       DateTime?   @map("shipped_at")
  deliveredAt     DateTime?   @map("delivered_at")
  cancelledAt     DateTime?   @map("cancelled_at")
  notes           String?     @db.Text
  trackingNumber  String?     @map("tracking_number")
  createdAt       DateTime    @default(now()) @map("created_at")
  updatedAt       DateTime    @updatedAt @map("updated_at")

  user       User        @relation(fields: [userId], references: [id])
  items      OrderItem[]
  payment    Payment?

  @@map("orders")
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  REFUNDED
}

model OrderItem {
  id          String  @id @default(uuid())
  orderId     String  @map("order_id")
  productId   String  @map("product_id")
  quantity    Int
  price       Decimal @db.Decimal(10, 2)
  variantInfo Json?   @map("variant_info")

  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

model Payment {
  id                String        @id @default(uuid())
  orderId           String        @unique @map("order_id")
  amount            Decimal       @db.Decimal(10, 2)
  currency          String        @default("USD")
  paymentMethod     String        @map("payment_method")
  transactionId     String?       @unique @map("transaction_id")
  paymentGateway    String        @map("payment_gateway")
  status            PaymentStatus
  failureReason     String?       @map("failure_reason")
  metadata          Json?
  createdAt         DateTime      @default(now()) @map("created_at")
  updatedAt         DateTime      @updatedAt @map("updated_at")

  order Order @relation(fields: [orderId], references: [id])

  @@map("payments")
}

// ============================================
// REVIEWS & RATINGS
// ============================================

model Review {
  id         String   @id @default(uuid())
  userId     String   @map("user_id")
  productId  String   @map("product_id")
  rating     Int
  title      String?
  comment    String?  @db.Text
  isVerified Boolean  @default(false) @map("is_verified")
  isApproved Boolean  @default(false) @map("is_approved")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("reviews")
}

// ============================================
// ADDRESSES
// ============================================

model Address {
  id         String   @id @default(uuid())
  userId     String   @map("user_id")
  fullName   String   @map("full_name")
  phone      String
  address1   String
  address2   String?
  city       String
  state      String
  postalCode String   @map("postal_code")
  country    String
  isDefault  Boolean  @default(false) @map("is_default")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("addresses")
}

// ============================================
// NFC & BLOCKCHAIN
// ============================================

model NfcTag {
  id          String   @id @default(uuid())
  productId   String   @map("product_id")
  tagId       String   @unique @map("tag_id")
  isActive    Boolean  @default(true) @map("is_active")
  activatedAt DateTime @default(now()) @map("activated_at")

  product Product   @relation(fields: [productId], references: [id])
  scans   NfcScan[]

  @@map("nfc_tags")
}

model NfcScan {
  id        String   @id @default(uuid())
  tagId     String   @map("tag_id")
  userId    String?  @map("user_id")
  location  Json?
  metadata  Json?
  scannedAt DateTime @default(now()) @map("scanned_at")

  tag  NfcTag @relation(fields: [tagId], references: [id])
  user User?  @relation(fields: [userId], references: [id])

  @@map("nfc_scans")
}

// ============================================
// TRIBE SYSTEM
// ============================================

model TribeMembership {
  id             String         @id @default(uuid())
  userId         String         @unique @map("user_id")
  tier           TribeTier      @default(BRONZE)
  points         Int            @default(0)
  lifetimePoints Int            @default(0) @map("lifetime_points")
  joinedAt       DateTime       @default(now()) @map("joined_at")
  tierUpdatedAt  DateTime       @default(now()) @map("tier_updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("tribe_memberships")
}

enum TribeTier {
  BRONZE
  SILVER
  GOLD
  PLATINUM
}
